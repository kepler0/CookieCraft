apply plugin: 'java'
apply plugin: 'cpp'
apply plugin: 'forge'

buildscript {
  repositories {
    mavenCentral()
    maven {
      name = "forge"
      url = "http://files.minecraftforge.net/maven"
    }
    maven {
      name = "Sonatype Snapshots"
      url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
      name = "Sonatype Releases"
      url = "https://oss.sonatype.org/content/repositories/releases/"
    }
  }
  dependencies {
    classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
  }
}

minecraft {
  version = '1.7.10-10.13.2.1230'
}

def nativeHeadersDir = file("$buildDir/nativeHeaders")

task nativeHeaders {
  def outputFile = file("$nativeHeadersDir/native.h")
  inputs.files sourceSets.main.output
  outputs.file outputFile
  doLast {
    outputFile.parentFile.mkdirs()
    exec {
      executable org.gradle.internal.jvm.Jvm.current().getExecutable('javah')
      args '-o', outputFile
      args '-classpath', sourceSets.main.runtimeClasspath.asPath
      args 'com.k2b6s9j.ccraft.CCraft'
    }
  }
}

libraries {
  main {
    binaries.all {
      cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
      if (targetPlatform.operatingSystem.macOsX) { cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin" }
      else if (targetPlatform.operatingSystem.linux) { cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux" }
      else if (targetPlatform.operatingSystem.windows) { cppCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32" }
      else if (targetPlatform.operatingSystem.freeBSD) { cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd" }
      cppCompiler.args "-I${nativeHeadersDir}"
      tasks.withType(CppCompile) { task ->
        task.dependsOn nativeHeaders
      }
    }
  }
}
