apply plugin: 'java'
apply plugin: 'cpp'
apply plugin: 'forge'

buildscript {
  repositories {
    mavenCentral()
    maven {
      name = "forge"
      url = "http://files.minecraftforge.net/maven"
    }
    maven {
      name = "Sonatype Snapshots"
      url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
      name = "Sonatype Releases"
      url = "https://oss.sonatype.org/content/repositories/releases/"
    }
  }
  dependencies {
    classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
  }
}

minecraft {
  version = '1.7.10-10.13.2.1230'
}

def nativeHeadersDir = file("$buildDir/nativeHeaders")

task nativeHeaders {
  def outputFile = file("$nativeHeadersDir/native.h")
  inputs.files sourceSets.main.output
  outputs.file outputFile
  doLast {
    outputFile.parentFile.mkdirs()
    exec {
      executable org.gradle.internal.jvm.Jvm.current().getExecutable('javah')
      args '-o', outputFile
      args '-classpath', sourceSets.main.runtimeClasspath.asPath
      args 'com.k2b6s9j.ccraft.CCraft'
    }
  }
}

def cppIncludes = [
  "${org.gradle.internal.jvm.Jvm.current().javaHome}/include",
  "${nativeHeadersDir}"
]

libraries {
  main {
    binaries.all {
      if (targetPlatform.operatingSystem.macOsX) {
        cppIncludes <<
        "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
      }
      else if (targetPlatform.operatingSystem.linux) {
        cppIncludes <<
        "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
      }
      else if (targetPlatform.operatingSystem.windows) {
        cppIncludes <<
        "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
      }
      else if (targetPlatform.operatingSystem.freeBSD) {
        cppIncludes <<
        "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
      }
      cppIncludes.each { dir ->
        cppCompiler.args "-I${dir}"
      }
      tasks.withType(CppCompile) { task ->
        task.dependsOn nativeHeaders
      }
    }
  }
}

task createLinterClangIncludeFile {
  File outputFile = file(".linter-clang-includes")
  inputs.file nativeHeaders
  outputs.file outputFile
  doLast {
    outputFile.parentFile.mkdirs()
    outputFile.delete()
    cppIncludes.each { dir ->
      outputFile << "${dir} "
    }
  }
}

binaries.withType(SharedLibraryBinary) { binary ->
  def universalJar = project.tasks.findByName('jar')
  def deobfJar = project.tasks.findByName('deobfJar')

  universalJar.into('lib') { from binary.sharedLibraryFile }
  universalJar.dependsOn binary
  deobfJar.into('lib') { from binary.sharedLibraryFile }
  deobfJar.dependsOn binary

  createLinterClangIncludeFile.dependsOn binary
}

jar {
  classifier = 'universal'
}

task sourceJar(type: Jar) {
  from sourceSets.main.java
  from sources.main.cpp.source
  from nativeHeaders
  classifier = 'src'
}

task deobfJar(type: Jar) {
  from sourceSets.main.output
  classifier = 'deobf'
}

artifacts {
  archives jar
  archives sourceJar
  archives deobfJar
}
